#include <stdio.h>
#include <limits.h>

int min(int a, int b) {
    return (a < b) ? a : b;
}

int tsp_dp(int graph[][5], int s, int n, int visited[], int dp[][5]) {

    if (visited[s] == n) {
        return graph[s][0];
    }

    if (dp[s][visited[s]] != -1) {
        return dp[s][visited[s]];
    }

    int min_distance = INT_MAX;

    for (int i = 0; i < n; i++) {

        if (visited[i] == 0 && i != s) {

            visited[i] = 1;

            int distance = graph[s][i] + tsp_dp(graph, i, n, visited, dp);

            visited[i] = 0;
            min_distance = min(min_distance, distance);
        }
    }

    dp[s][visited[s]] = min_distance;

    return min_distance;
}

void solve_tsp(int graph[][5], int n) {
    int dp[5][5];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dp[i][j] = -1;
        }
    }

    int visited[5] = {0};

    visited[0] = 1;

    int min_distance = tsp_dp(graph, 0, n, visited, dp);

    printf("Minimum distance: %d\n", min_distance);
}

int main() {
   	printf("Ch.Durga Narendra - 192211285\n");
    int graph[][5] = {
        {0, 10, 15, 20, 25},
        {10, 0, 35, 30, 18},
        {15, 35, 0, 28, 22},
        {20, 30, 28, 0, 16},
        {25, 18, 22, 16, 0}
    };

    int n = 5;

    solve_tsp(graph, n);

    return 0;
}
